tmax = max(t)
df = 1/tmax
f = seq(-fNyq, fNyq-df, by=df)
mask=rep(c(1, -1),length.out=n)
aa = a * mask
# J/Hz; source: http://aaronscher.com/Course_materials/Communication_Systems/documents/Energy_signals_matlab_tutorial.pdf
mean(Mod(fft(aa))^2)
}
total_energy <- function(a,Fs=100){
t <- seq(1/Fs, length(a)*1/Fs, 1/Fs)
a<-a-mean(a)
n = length(a)
dt = 1/Fs
fNyq = 1/(2*dt)
tmax = max(t)
df = 1/tmax
f = seq(-fNyq, fNyq-df, by=df)
mask=rep(c(1, -1),length.out=n)
aa = a * mask
# I think you are missing a ^2 here
sum(Mod(fft(aa))^2)
}
roll_off <- function(a,Fs=100){
t <- seq(1/Fs, length(a)*1/Fs, 1/Fs)
a<-a-mean(a)
n = length(a)
dt = 1/Fs
fNyq = 1/(2*dt)
tmax = max(t)
df = 1/tmax
f = seq(-fNyq, fNyq-df, by=df)
mask=rep(c(1, -1),length.out=n)
aa = a * mask
amp<-Mod(fft(aa))/n
freq<-f[f>0]
amp<-amp[f>0]
cums<-cumsum(amp)
roll<-cums<0.85*max(cums)
rolloff<-tail(freq[roll],1)
return(rolloff)}
spec_centroid <- function(a,Fs=100){
t <- seq(1/Fs, length(a)*1/Fs, 1/Fs)
a<-a-mean(a)
n = length(a)
dt = 1/Fs
fNyq = 1/(2*dt)
tmax = max(t)
df = 1/tmax
f = seq(-fNyq, fNyq-df, by=df)
mask=rep(c(1, -1),length.out=n)
aa = a * mask
amp<-Mod(fft(aa))/n
freq<-f[f>0]
amp<-amp[f>0]
cums<-cumsum(amp)
roll<-cums<0.85*max(cums)
cent<-tail(freq[roll],1)
return(cent)}
#
#
# Efficient way to perform calculations on all variables and store in new dataframe? Old way I did it in EDA.RMD could work, but it's very inefficient.
# only doing x?
tst<-slide(accX, 'entropy', .before = 100, .after = 100,.step = 50)
# is.numeric(Train_df[,names(Train_df)])
df_in<-Test_df
name<-c('Index')
feature_gen<- function(df_in,feats,stp=50,win=200){
index<-length(slide(df_in[,1],feats[1],.before =win/2 ,.after = win/2,.step = stp))
target<-length(slide(df_in[,1],feats[1],.before =win/2 ,.after = win/2,.step = stp))
df_out<-data.frame(Index=seq(1,index,1),Target=target)
df_in$Target<-as.logical(df_in$Target)
col_inds<-which(unlist(lapply(df_in, is.numeric)))
count=3
for (i in 1:length(feats)){
for (j in 1:length(col_inds)){
name[count]<-paste(names(df_in)[j],'_',feats[i],sep = '')
count<-count+1
df<-slide(df_in[,j],feats[i],.before =win/2 ,.after = win/2,.step = stp))
# is.numeric(Train_df[,names(Train_df)])
df_in<-Test_df
name<-c('Index')
feature_gen<- function(df_in,feats,stp=50,win=200){
index<-length(slide(df_in[,1],feats[1],.before =win/2 ,.after = win/2,.step = stp))
target<-length(slide(df_in[,1],feats[1],.before =win/2 ,.after = win/2,.step = stp))
df_out<-data.frame(Index=seq(1,index,1),Target=target)
df_in$Target<-as.logical(df_in$Target)
col_inds<-which(unlist(lapply(df_in, is.numeric)))
count=3
for (i in 1:length(feats)){
for (j in 1:length(col_inds)){
name[count]<-paste(names(df_in)[j],'_',feats[i],sep = '')
count<-count+1
df<-slide(df_in[,j],feats[i],.before =win/2 ,.after = win/2,.step = stp)
df_out<-cbind(df_out,df)
names(df_out)<-name
}}
return(df_out)}
Fs <- 100
win <- 2
stp <- 0.5
window <-win*Fs
step <- stp*Fs
feats<-c('entropy','mean_energy','total_energy','roll_off','spec_centroid','rms','min','max','q1','q3','sd','skewness','kurtosis','median')
Test_feat_df<-feature_gen(Test_df,feats,win = win,stp=step)
df_in<-Test_df
length(slide(df_in[,1],feats[1],.before =win/2 ,.after = win/2,.step = stp))
length(slide(df_in[,1],feats[1],.before =100 ,.after = 100,.step = stp))
length(slide(df_in[,1],max,.before =100 ,.after = 100,.step = stp))
knitr::opts_chunk$set(echo = TRUE)
#setwd("~/Desktop/Duke/Class/Fall 2020/Biomedical DS/BME590_Fall_Detection")
#install.packages("Rcpproll")
#install.packages("slider")
library(RcppRoll)
library(slider)
library(tibble)
library(purrr)
library(lubridate, warn.conflicts = FALSE)
library(dplyr, warn.conflicts = FALSE)
library(readxl)
library(evobiR)
library(patchwork)
library(gridExtra)
library(moments)
library(corrplot)
library(psych)
library(corrr)
library(signal)
library(swdft)
library(seewave)
library(fftw)
Falls_df1 <- read.csv('Fall_Data1.csv')
Falls_df2 <- read.csv('Fall_Data2.csv')
Data  <- rbind(Falls_df1,Falls_df2)
Data_EDA <- rbind(Falls_df1,Falls_df2)
rm(Falls_df1)
rm(Falls_df2)
cat('The Number of Falls in this Set of Data is:',(sum(Data$Target)),'\n')
Fs <- 100
win <- 2
stp <- 0.5
window <-win*Fs
step <- stp*Fs
Falls_df <- subset(Data, Target==1)
noFalls_df<- subset(Data, Target==0)
plot.frequency.spectrum <- function(X.k, title,xlimits=c(0,length(X.k))) {
plot.data  <- cbind(0:(length(X.k)-1), Mod(X.k))
plot.data[2:length(X.k),2] <- 2*plot.data[2:length(X.k),2]
plot(plot.data, t="h", lwd=2, main=title,
xlab="Frequency (Hz)", ylab="Strength",
xlim=xlimits, ylim=c(0,max(Mod(plot.data[,2]))))
}
par(mfrow=c(3,3))
plot.frequency.spectrum(fft(Data_EDA$accX), "Acceleration X",xlimits=c(0,50))
plot.frequency.spectrum(fft(Data_EDA$accY), "Acceleration Y",xlimits=c(0,50))
plot.frequency.spectrum(fft(Data_EDA$accZ), "Acceleration Z",xlimits=c(0,50))
plot.frequency.spectrum(fft(Data_EDA$angX), "Angular Rotation X",xlimits=c(0,50))
plot.frequency.spectrum(fft(Data_EDA$angY), "Angular Rotation Y",xlimits=c(0,50))
plot.frequency.spectrum(fft(Data_EDA$angZ), "Angular Rotation Z",xlimits=c(0,50))
plot.frequency.spectrum(fft(Data_EDA$maxX), "Magnetic Flux Density X",xlimits=c(0,50))
plot.frequency.spectrum(fft(Data_EDA$magY), "Magnetic Flux Density Y",xlimits=c(0,50))
plot.frequency.spectrum(fft(Data_EDA$magZ), "Magnetic Flux Density Z",xlimits=c(0,50))
set.seed(97)
## 80% of the sample size
smp_size <- floor(0.80 * nrow(Falls_df))
falls_train_ind <- sample(seq_len(nrow(Falls_df)), size = smp_size)
Falls_train <- Falls_df[falls_train_ind, ]
Falls_test <- Falls_df[-falls_train_ind, ]
smp_size <- floor(0.80 * nrow(noFalls_df))
nofalls_train_ind <- sample(seq_len(nrow(noFalls_df)), size = smp_size)
noFalls_train <- noFalls_df[nofalls_train_ind, ]
noFalls_test <- noFalls_df[-nofalls_train_ind, ]
Train_df <- rbind(noFalls_train,Falls_train)
Test_df <- rbind(noFalls_test,Falls_test)
bf <- signal::butter(4, 1/49, type="low")
Time <- Train_df$Time
accX <- signal::filtfilt(bf, Train_df$accX)
accY <- signal::filtfilt(bf, Train_df$accY)
accZ <- signal::filtfilt(bf, Train_df$accZ)
angX <- signal::filtfilt(bf, Train_df$angX)
angY <- signal::filtfilt(bf, Train_df$angY)
angZ <- signal::filtfilt(bf, Train_df$angZ)
maxX <- signal::filtfilt(bf, Train_df$maxX)
magY <- signal::filtfilt(bf, Train_df$magY)
magZ <- signal::filtfilt(bf, Train_df$magZ)
Target <- Train_df$Target
Train_df <- data.frame( accX, accY, accZ, angX, angY, angZ, maxX, magY, magZ, Target)
str(Train_df)
Time <- Test_df$Time
accX <- signal::filtfilt(bf, Test_df$accX)
accY <- signal::filtfilt(bf, Test_df$accY)
accZ <- signal::filtfilt(bf, Test_df$accZ)
angX <- signal::filtfilt(bf, Test_df$angX)
angY <- signal::filtfilt(bf, Test_df$angY)
angZ <- signal::filtfilt(bf, Test_df$angZ)
maxX <- signal::filtfilt(bf, Test_df$maxX)
magY <- signal::filtfilt(bf, Test_df$magY)
magZ <- signal::filtfilt(bf, Test_df$magZ)
Target <- Test_df$Target
Test_df <- data.frame(accX, accY, accZ, angX, angY, angZ, maxX, magY, magZ, Target)
N_train <- length(Train_df)
window_size <- 32
# https://cran.r-project.org/web/packages/swdft/vignettes/swdft-intro.html (useful)
swdft_fft <- function(x, n, taper=1) {
N <- length(x)
P <- N - n + 1
a <- array(data = NA, dim = c(n, P))}
rms <- function(x){
sqrt(sum(x^2)/length(x))
}
q1 <- function(x){
quantile(x, 0.25,na.rm = TRUE)
}
q3 <- function(x){
quantile(x, 0.75,na.rm = TRUE)
}
entropy <- function(a,Fs=100){
t <- seq(1/Fs, length(a)*1/Fs, 1/Fs)
a<-a-mean(a)
n = length(a)
dt = 1/Fs
fNyq = 1/(2*dt)
tmax = max(t)
df = 1/tmax
f = seq(-fNyq, fNyq-df, by=df)
mask=rep(c(1, -1),length.out=n)
aa = a * mask
sh(Mod(fft(aa)), alpha = "shannon")
}
mean_energy <- function(a,Fs=100){
t <- seq(1/Fs, length(a)*1/Fs, 1/Fs)
a<-a-mean(a)
n = length(a)
dt = 1/Fs
fNyq = 1/(2*dt)
tmax = max(t)
df = 1/tmax
f = seq(-fNyq, fNyq-df, by=df)
mask=rep(c(1, -1),length.out=n)
aa = a * mask
# J/Hz; source: http://aaronscher.com/Course_materials/Communication_Systems/documents/Energy_signals_matlab_tutorial.pdf
mean(Mod(fft(aa))^2)
}
total_energy <- function(a,Fs=100){
t <- seq(1/Fs, length(a)*1/Fs, 1/Fs)
a<-a-mean(a)
n = length(a)
dt = 1/Fs
fNyq = 1/(2*dt)
tmax = max(t)
df = 1/tmax
f = seq(-fNyq, fNyq-df, by=df)
mask=rep(c(1, -1),length.out=n)
aa = a * mask
# I think you are missing a ^2 here
sum(Mod(fft(aa))^2)
}
roll_off <- function(a,Fs=100){
t <- seq(1/Fs, length(a)*1/Fs, 1/Fs)
a<-a-mean(a)
n = length(a)
dt = 1/Fs
fNyq = 1/(2*dt)
tmax = max(t)
df = 1/tmax
f = seq(-fNyq, fNyq-df, by=df)
mask=rep(c(1, -1),length.out=n)
aa = a * mask
amp<-Mod(fft(aa))/n
freq<-f[f>0]
amp<-amp[f>0]
cums<-cumsum(amp)
roll<-cums<0.85*max(cums)
rolloff<-tail(freq[roll],1)
return(rolloff)}
spec_centroid <- function(a,Fs=100){
t <- seq(1/Fs, length(a)*1/Fs, 1/Fs)
a<-a-mean(a)
n = length(a)
dt = 1/Fs
fNyq = 1/(2*dt)
tmax = max(t)
df = 1/tmax
f = seq(-fNyq, fNyq-df, by=df)
mask=rep(c(1, -1),length.out=n)
aa = a * mask
amp<-Mod(fft(aa))/n
freq<-f[f>0]
amp<-amp[f>0]
cums<-cumsum(amp)
roll<-cums<0.85*max(cums)
cent<-tail(freq[roll],1)
return(cent)}
#
#
# Efficient way to perform calculations on all variables and store in new dataframe? Old way I did it in EDA.RMD could work, but it's very inefficient.
# only doing x?
# is.numeric(Train_df[,names(Train_df)])
df_in<-Test_df
name<-c('Index')
feature_gen<- function(df_in,feats,stp=50,win=200){
index<-length(slide(df_in[,1],max,.before =100 ,.after = 100,.step = stp))
target<-length(slide(df_in[,1],max,.before =100 ,.after = 100,.step = stp))
df_out<-data.frame(Index=seq(1,index,1),Target=target)
df_in$Target<-as.logical(df_in$Target)
col_inds<-which(unlist(lapply(df_in, is.numeric)))
count=3
for (i in 1:length(feats)){
for (j in 1:length(col_inds)){
name[count]<-paste(names(df_in)[j],'_',feats[i],sep = '')
count<-count+1
df<-slide(df_in[,j],feats[i],.before =win/2 ,.after = win/2,.step = stp)
df_out<-cbind(df_out,df)
names(df_out)<-name
}}
return(df_out)}
Fs <- 100
win <- 2
stp <- 0.5
window <-win*Fs
step <- stp*Fs
feats<-c('entropy','mean_energy','total_energy','roll_off','spec_centroid','rms','min','max','q1','q3','sd','skewness','kurtosis','median')
Test_feat_df<-feature_gen(Test_df,feats,win = win,stp=step)
Fs <- 100
win <- 2
stp <- 0.5
window <-win*Fs
step <- stp*Fs
feats<-c('entropy','mean_energy','total_energy','roll_off','spec_centroid','rms','min','max','sd','skewness','kurtosis','median')
Test_feat_df<-feature_gen(Test_df,feats,win = win,stp=step)
Fs <- 100
win <- 2
stp <- 0.5
window <-win*Fs
step <- stp*Fs
feats<-c('entropy')#,'mean_energy','total_energy','roll_off','spec_centroid','rms','min','max','q1','q3','sd','skewness','kurtosis','median')
Test_feat_df<-feature_gen(Test_df,feats,win = win,stp=step)
# is.numeric(Train_df[,names(Train_df)])
df_in<-Test_df
name<-c('Index')
feature_gen<- function(df_in,feats,stp=50,win=200){
index<-length(slide(df_in[,1],max,.before =100 ,.after = 100,.step = stp))
target<-length(slide(df_in[,1],max,.before =100 ,.after = 100,.step = stp))
df_out<-data.frame(Index=seq(1,index,1),Target=target)
df_in$Target<-as.logical(df_in$Target)
col_inds<-which(unlist(lapply(df_in, is.numeric)))
count=3
for (i in 1:length(feats)){
for (j in 1:length(col_inds)){
name[count]<-paste(names(df_in)[j],'_',feats[i],sep = '')
count<-count+1
df<-slide(df_in[,j],feats[i],.before =100 ,.after = 100,.step = stp)
df_out<-cbind(df_out,df)
names(df_out)<-name
}}
return(df_out)}
Fs <- 100
win <- 2
stp <- 0.5
window <-win*Fs
step <- stp*Fs
feats<-c('entropy')#,'mean_energy','total_energy','roll_off','spec_centroid','rms','min','max','q1','q3','sd','skewness','kurtosis','median')
Test_feat_df<-feature_gen(Test_df,feats,win = win,stp=step)
Fs <- 100
win <- 2
stp <- 0.5
window <-win*Fs
step <- stp*Fs
feats<-c('entropy')#,'mean_energy','total_energy','roll_off','spec_centroid','rms','min','max','q1','q3','sd','skewness','kurtosis','median')
Test_feat_df<-feature_gen(Test_df,feats,win = 200,stp=50)
df_in<-Test_df
name<-c('Index')
length(slide(df_in[,1],max,.before =100 ,.after = 100,.step = stp))
length(slide(as.numeric(df_in[,1]),max,.before =100 ,.after = 100,.step = stp))
rlang::last_error()
length(slide(df_in[,1],max,.before =100 ,.after = 100,.step = stp))
length(slide(df_in[,1],'max',.before =100 ,.after = 100,.step = stp))
length(slide(df_in[,1],'max',.before =100 ,.after = 100,.step = stp))
length(slide(df_in[,1],.f = 'max',.before =100 ,.after = 100,.step = stp))
length(slide(df_in[,1],.f = max,.before =100 ,.after = 100,.step = stp))
z<-slide(df_in[,1],.f = max,.before =100 ,.after = 100,.step = stp)
z<-slide(df_in$acc,.f = max,.before =100 ,.after = 100,.step = stp)
z<-slide(df_in$accX,.f = max,.before =100 ,.after = 100,.step = stp)
z<-slide(.x = accX,.f = max,.before =100 ,.after = 100,.step = stp)
z<-slide(1:2000,.f = max,.before =100 ,.after = 100,.step = stp)
z<-slide_dfr(1:2000,.f = max,.before =100 ,.after = 100,.step = stp)
z<-slide_dfr(1:2000,.f = max,.before =100 ,.after = 100,.step = stp)
slide(accX,max,.before = 200,.after = 200,.step = 200)
z<-slide(accX,max,.before = 200,.after = 200,.step = 200)
z<-slide(accX,'max',.before = 200,.after = 200,.step = 200)
z<-slide(Test_df$accX,'max',.before = 200,.after = 200,.step = 200)
z<-length(slide(Test_df$accX,'max',.before = 200,.after = 200,.step = 200))
z<-dim(slide(Test_df$accX,'max',.before = 200,.after = 200,.step = 200))
z<-(slide(Test_df$accX,'max',.before = 200,.after = 200,.step = 200))
z<-na.omit(slide(Test_df$accX,'max',.before = 200,.after = 200,.step = 200))
z<-na.omit(slide(Test_df$accX,'max',.before = 200,.after = 200,.step = 200))
z<-(slide(Test_df$accX,'max',.before = 200,.after = 200,.step = 200))
mylist<-z[-which(sapply(z, is.null))]
df_in<-Test_df
index<-slide(df_in[,1],max,.before =100 ,.after = 100,.step = stp)
z<-(slide(Test_df$accX,'max',.before = 200,.after = 200,.step = 200))
mylist<-z[-which(sapply(z, is.null))]
# is.numeric(Train_df[,names(Train_df)])
df_in<-Test_df
name<-c('Index')
feature_gen<- function(df_in,feats,stp=50,win=200){
index<-slide(df_in[,1],max,.before =100 ,.after = 100,.step = stp)
index<-index[-which(sapply(index, is.null))]
target<-length(slide(df_in[,1],max,.before =100 ,.after = 100,.step = stp))
df_out<-data.frame(Index=seq(1,index,1),Target=target)
df_in$Target<-as.logical(df_in$Target)
col_inds<-which(unlist(lapply(df_in, is.numeric)))
count=3
for (i in 1:length(feats)){
for (j in 1:length(col_inds)){
name[count]<-paste(names(df_in)[j],'_',feats[i],sep = '')
count<-count+1
df<-slide(df_in[,j],feats[i],.before =100 ,.after = 100,.step = stp)
df_out<-cbind(df_out,df)
names(df_out)<-name
}}
return(df_out)}
z<-(slide(Test_df[,1],'max',.before = 200,.after = 200,.step = 200))
mylist<-z[-which(sapply(z, is.null))]
z<-(slide(Test_df[,1],'max',.before = 100,.after = 100,.step = 50))
mylist<-z[-which(sapply(z, is.null))]
z<-(slide(Test_df[,1],'max',.before = 100,.after = 100,.step = 50))
mylist<-z[-which(sapply(z, is.null))]
z<-(slide(Test_df[,1],'entropy',.before = 100,.after = 100,.step = 50))
mylist<-z[-which(sapply(z, is.null))]
# is.numeric(Train_df[,names(Train_df)])
df_in<-Test_df
name<-c('Index')
feature_gen<- function(df_in,feats,stp=50,win=200){
ix<-slide(df_in[,1],max,.before =100 ,.after = 100,.step = stp)
index<-ix[-which(sapply(ix, is.null))]
trgt<-slide(df_in[,1],max,.before =100 ,.after = 100,.step = stp)
target<-trgt[-which(sapply(trgt, is.null))]
df_out<-data.frame(Index=seq(1,index,1),Target=target)
df_in$Target<-as.logical(df_in$Target)
col_inds<-which(unlist(lapply(df_in, is.numeric)))
count=3
for (i in 1:length(feats)){
for (j in 1:length(col_inds)){
name[count]<-paste(names(df_in)[j],'_',feats[i],sep = '')
count<-count+1
df<-slide(df_in[,j],feats[i],.before =100 ,.after = 100,.step = stp)
df_mid<-df[-which(sapply(df, is.null))]
df_out<-cbind(df_out,df_mid)
names(df_out)<-name
}}
return(df_out)}
Fs <- 100
win <- 2
stp <- 0.5
window <-win*Fs
step <- stp*Fs
feats<-c('entropy')#,'mean_energy','total_energy','roll_off','spec_centroid','rms','min','max','q1','q3','sd','skewness','kurtosis','median')
Test_feat_df<-feature_gen(Test_df,feats,win = 200,stp=50)
Fs <- 100
win <- 2
stp <- 0.5
window <-win*Fs
step <- stp*Fs
feats<-c('entropy')#,'mean_energy','total_energy','roll_off','spec_centroid','rms','min','max','q1','q3','sd','skewness','kurtosis','median')
Test_feat_df<-feature_gen(Test_df,feats,win = 200,stp=50)
z<-(slide(Test_df[,1],'entropy',.before = 100,.after = 100,.step = 50))
mylist<-z[-which(sapply(z, is.null))]
# is.numeric(Train_df[,names(Train_df)])
df_in<-Test_df
name<-c('Index')
feature_gen<- function(df_in,feats,stp=50,win=200){
ix<-slide(df_in[,1],max,.before =100 ,.after = 100,.step = stp)
index<-length(ix[-which(sapply(ix, is.null))])
trgt<-slide(df_in[,1],max,.before =100 ,.after = 100,.step = stp)
target<-length(trgt[-which(sapply(trgt, is.null))])
df_out<-data.frame(Index=seq(1,index,1),Target=target)
df_in$Target<-as.logical(df_in$Target)
col_inds<-which(unlist(lapply(df_in, is.numeric)))
count=3
for (i in 1:length(feats)){
for (j in 1:length(col_inds)){
name[count]<-paste(names(df_in)[j],'_',feats[i],sep = '')
count<-count+1
df<-slide(df_in[,j],feats[i],.before =100 ,.after = 100,.step = stp)
df_mid<-df[-which(sapply(df, is.null))]
df_out<-cbind(df_out,df_mid)
names(df_out)<-name
}}
return(df_out)}
Fs <- 100
win <- 2
stp <- 0.5
window <-win*Fs
step <- stp*Fs
feats<-c('entropy')#,'mean_energy','total_energy','roll_off','spec_centroid','rms','min','max','q1','q3','sd','skewness','kurtosis','median')
Test_feat_df<-feature_gen(Test_df,feats,win = 200,stp=50)
# Train_feat_df<-feature_gen(Train_df,feats,win = 200,stp=40)
Fs <- 100
win <- 2
stp <- 0.5
window <-win*Fs
step <- stp*Fs
feats<-c('entropy','mean_energy','total_energy','roll_off','spec_centroid','rms','min','max','q1','q3','sd','skewness','kurtosis','median')
Test_feat_df<-feature_gen(Test_df,feats,win = 200,stp=50)
Fs <- 100
win <- 2
stp <- 0.5
window <-win*Fs
step <- stp*Fs
feats<-c('entropy')#,'mean_energy','total_energy','roll_off','spec_centroid','rms','min','max','q1','q3','sd','skewness','kurtosis','median')
Test_feat_df<-feature_gen(Test_df,feats,win = 200,stp=50)
# Train_feat_df<-feature_gen(Train_df,feats,win = 200,stp=40)
